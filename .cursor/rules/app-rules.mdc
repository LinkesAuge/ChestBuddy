---
description: 
globs: 
alwaysApply: true
---
# Chest Tracker Correction Tool - Project Rules

## Code Organization

- Always organize imports in this order: standard library, third-party packages, local modules
- Use relative imports for modules within the same package
- Follow the src/ directory structure for new components
- Place test files in the tests/ directory with a matching structure
- Use pathlib for all file path operations

## Naming Conventions

- Class names: PascalCase
- Method and function names: snake_case
- Constants: UPPER_SNAKE_CASE
- Private attributes/methods: _leading_underscore
- Signal connections: _on_signal_name
- UI components: use descriptive names with component type suffix (e.g., import_button, entries_table)

## Qt/PySide6 Practices

- Use Qt Signal/Slot mechanism for component communication
- Initialize UI components in a separate _setup_ui method
- Connect signals in a separate _connect_signals method
- Prefix slot methods with _on_ (e.g., _on_button_clicked)
- Use QSplitter for resizable layouts
- Implement custom table delegates for specialized cell rendering/editing
- Avoid direct manipulation of Qt widgets from non-UI classes

## Background Processing

- Use the BackgroundWorker/BackgroundTask pattern for long-running operations
- Implement the run() method in subclasses of BackgroundTask
- Check for cancellation in long-running tasks using is_cancelled property
- Connect progress signals to update UI during task execution
- Always clean up worker threads when no longer needed
- Use read_csv_background for reading large CSV files
- Ensure proper error handling in background tasks
- Return clear error messages from background tasks (not just exceptions)

## pandas Usage

- Create copies of DataFrames before modification (df.copy())
- Use vectorized operations instead of loops when possible
- Always handle the empty DataFrame case
- Use descriptive column names
- Create indexes for frequently filtered columns
- Clear unused DataFrames to reduce memory usage

## Configuration Management

- Always use the ConfigManager for accessing/updating configuration
- Use the get_path/set_path methods for file paths
- Check for file existence before operations
- Create directories if missing with create_if_missing parameter
- Add migration support for backward compatibility

## Error Handling

- Use specific exception types for different error categories
- Log errors with appropriate context
- Provide clear user feedback for errors
- Implement graceful recovery for common error conditions
- Validate input data before processing

## Data Validation

- Use the ValidationService for all validation operations
- Support multiple validation levels (exact, case-insensitive, fuzzy)
- Implement proper error feedback for validation errors
- Cache validation results when appropriate
- Use consistent validation color coding in the UI

## File Operations

- Always use FileService for file operations
- Implement proper error handling for file operations
- Support various file formats (TXT, CSV)
- Preserve file format and structure during export
- Handle file encoding issues gracefully
- Use chunked reading for large files
- Process files in the background for UI responsiveness

## Pattern Catalog

### Observer Pattern
- Used for updates between DataFrameStore and UI components
- Implemented via Qt Signals
- Common pattern: data_store.entries_changed.connect(self._on_entries_changed)

### Service Pattern
- Business logic encapsulated in service classes
- Services depend on DataFrameStore for data access
- Common services: ValidationService, CorrectionService, FileService

### Adapter Pattern
- Used for transforming data between formats
- Key adapters: TableModelAdapter, FileParserAdapter

### Command Pattern
- Used for user actions that can be undone/redone
- Key commands: CorrectionCommand, ValidationCommand

### Worker Pattern
- Used for background processing to keep UI responsive
- BackgroundWorker manages thread lifecycle and signal handling
- BackgroundTask defines the interface for asynchronous operations
- Tasks report progress via signals
- Example implementation: CSVReadTask for reading CSV files in the background

## Project-Specific Guidelines
- Correction lists are always in CSV or TXT format with From,To,Categtory,Enabled columns
- Validation lists are plain text with one entry per line
- The main workflow is: Import → Validate → Correct → Export
- Configuration should persist between application sessions
- UI updates should be responsive and non-blocking
- Heavy operations should run in background threads

## Performance Tips

- Use BackgroundWorker for long-running operations
- Process large files in chunks
- Implement signal throttling for frequent updates
- Use lazy loading for large datasets
- Cache expensive computation results
- Implement pagination for large tables
- Report progress for time-consuming operations

## Testing Requirements

- Use pytest for all tests
- Use pytestqt for testing Qt components
- Create test fixtures for common test data
- Mock external dependencies
- Test each service independently
- Use QtBot for simulating signal interactions
- Test background processing with appropriate assertions
- Test cancellation and error handling in background tasks
- Test critical user workflows
- Verify performance with larger datasets

# ChestBuddy App Rules

## UI Architecture Patterns

### UI Component Structure
- All content views inherit from `BaseView`
- BaseView provides standardized header and content areas
- Each view is self-contained with its own layout
- New components should follow existing patterns

### Adapter Pattern Usage
- Existing components are wrapped with adapter classes
- Adapters inherit from BaseView
- Adapters redirect signals to maintain compatibility
- Original components are embedded in the adapter's content area

### Navigation Flow
- MainWindow manages view switching through _set_active_view method
- SidebarNavigation signals view changes through navigation_changed signal
- Views are stored in a dictionary keyed by their identifier
- Active view is tracked in MainWindow

### Signal-Slot Architecture
- Components communicate through signals and slots
- Signals should be clearly named with their purpose
- MainWindow emits application-level signals to app.py
- Signal connections should be set up in _setup_connections methods

## UI Styling Conventions

### Color System
- Use `Colors` class constants for all colors
- Primary: #1E3A5F (dark blue)
- Secondary: #2C5282 (medium blue)
- Accent: #F0B429 (gold)
- Background: #F7FAFC (light gray)
- Text colors: #FFFFFF (light) and #2D3748 (dark)
- Never hardcode color values in component code

### Component Styling
- Use QSS (Qt Style Sheets) for styling
- Centralize style definitions in style.py
- Custom styling functions should be named get_X_style()
- Apply consistent border-radius (4-6px) for components
- Use consistent padding and margins (8-16px)

### Icon Usage
- Use the IconProvider for all icons
- SVG icons are preferred for scalability
- Use consistent icon sizes (16px, 24px, 32px)
- Dark icons on light backgrounds, light icons on dark backgrounds

## Layout Standards

### General Layout Rules
- Use layouts (QVBoxLayout, QHBoxLayout, QGridLayout) instead of fixed positioning
- Standardized margins: 16px outer, 8px inner
- Content alignment: Left-aligned text, centered buttons
- Consistent spacing: 8px between related elements, 16px between sections

### Header Formatting
- Headers use a QHBoxLayout with title on left, actions on right
- Standard height: 48px
- Title font: Bold, 16px
- Include a bottom border: 1px solid Colors.BORDER

### Content Area
- Content areas should be scrollable for overflow content
- Main sections separated by 24px vertical spacing
- Related controls grouped with 8px spacing
- Action buttons aligned to the bottom right

## User Interaction Patterns

### Button Standards
- Primary actions: Gold accent color (#F0B429)
- Secondary actions: Medium blue (#2C5282)
- Destructive actions: Red (#E53E3E)
- Standard button height: 32px
- Use icons+text for important actions

### Input Controls
- Input field height: 32px
- Dropdown height: 32px
- Consistent focus indication
- Validation feedback next to fields
- Input masks for formatted fields

### Error Handling
- Validation errors shown in-line when possible
- Error notifications use a consistent format
- Critical errors displayed in modal dialogs
- Errors should provide clear resolution steps

## Implementation Guidelines

### New View Creation Process
1. Create a new class inheriting from BaseView
2. Implement _setup_ui method calling super()._setup_ui() first
3. Add content widgets to self.content_layout
4. Create and connect signals in _setup_connections
5. Add the view to MainWindow's _setup_views method

### Adapter Creation Process
1. Create a new class inheriting from BaseView
2. Initialize the original component in _setup_ui
3. Add the original component to content_layout
4. Connect the original component's signals
5. Implement methods to expose needed functionality

### Component Integration Checklist
- View added to MainWindow._views dictionary
- Navigation item added to SidebarNavigation
- View shown/hidden based on navigation state
- Signals properly connected
- Error states handled
- Resources properly managed

## Code Structure Conventions

### File Organization
- UI component files named with snake_case
- Class names use PascalCase
- One primary class per file
- Related utility classes can be in the same file
- Private methods prefixed with underscore

### Import Order
1. Standard library imports
2. Third-party imports (PySide6)
3. Application imports
4. Relative imports
5. Type annotations

### Documentation Standards
- Docstrings for all classes and public methods
- Type hints for all parameters and return types
- Comments explaining complex logic
- Signal documentation in class docstring

## Key UI Implementation Notes

### MainWindow Structure
- Central widget: Splitter between sidebar and content
- Content uses QStackedWidget for view switching
- Menu structure follows standard application patterns
- Toolbar contains frequently used actions
- Status bar shows application state

### View Switching Flow
1. User clicks sidebar item
2. SidebarNavigation.navigation_changed signal emits
3. MainWindow._on_navigation_changed called
4. MainWindow._set_active_view changes current widget
5. Current view handles its initialization

### Dashboard Design
- 3-column grid for statistics cards
- Recent files list with double-click to open
- Quick actions section with common tasks
- Welcome message for first-time users
- Status summary for current project

### BaseView Functionality
- Standard header with title
- Optional action buttons in header
- Content area with vertical layout
- Methods for adding action buttons
- Signal for action button clicks

# CSV Import Progress Reporting

## Incremental Progress Improvements
- Progress bars now show incremental updates during CSV loading instead of jumping from 0% to 100%
- The progress dialog now shows:
  - Current file being processed (e.g., "File 1 of 3")
  - Rows being loaded with proper formatting (e.g., "1,234 of 5,678 rows")
  - Total rows across all files in the status text
- Numbers are formatted with commas for better readability (e.g., "1,234,567" instead of "1234567")
- Added a "Processing data" intermediate step to prevent UI freezing during data model updates
- Improved row count estimation for multiple files by tracking actual file sizes

## Implementation Notes
- `MultiCSVLoadTask` passes progress callbacks to `read_csv_chunked` to get chunked updates
- The task tracks total progress across all files and reports incremental progress
- `DataManager` processes progress signals and forwards them to the UI
- `DataManager._on_csv_load_success` now shows a "Processing data" message before updating the data model
- `MainWindow` formats progress information in the progress dialog with appropriate details
- The system correctly handles both per-file progress and total progress across all files
- Individual file sizes are tracked to provide more accurate total row estimation
- Strategic calls to `QApplication.processEvents()` keep the UI responsive during heavy operations

## Code Pathways
- `MultiCSVLoadTask` → `_on_file_progress` → `_throttled_progress_update` → `progress.emit`
- `CSVService.read_csv_chunked` → progress_callback → `MultiCSVLoadTask._on_file_progress`
- `DataManager._on_load_progress` / `_on_file_progress` → `load_progress.emit`
- `DataManager._on_csv_load_success` → `load_finished.emit` with "Processing" message → data model update → `load_success.emit`
- `MainWindow._on_load_progress` → Updates `ProgressDialog` with file and total progress
- `MainWindow._on_load_finished` → Handles processing state → Updates dialog to show in-progress state 