---
description: 
globs: 
alwaysApply: false
---
# Bug Tracking and Resolution

This document tracks bugs, issues, and their resolutions in the ChestBuddy project.

## Active Issues

### Performance Issues
- **Large Dataset Performance**: When handling larger datasets (>1000 rows), the application experiences significant slowdowns
  - **Status**: Investigating
  - **Priority**: High
  - **Components**: ChestDataModel, DataView
  - **Next Steps**: Profile the application to identify bottlenecks

### CSV Encoding Issues
- **Special Character Handling**: CSV files with German umlauts and other special characters may not load correctly
  - **Status**: Investigating
  - **Priority**: Medium
  - **Components**: CSVService
  - **Next Steps**: Implement better encoding detection and handling

### Error Handling Improvements
- **Inconsistent Error Messages**: Error handling across the application is inconsistent
  - **Status**: To Do
  - **Priority**: Medium
  - **Components**: All
  - **Next Steps**: Create a standardized error handling approach

## Recently Resolved Issues

### UI Component Tests Fixed
- **TestDataView.test_update_view**: Fixed assertion error by updating row count expectations and proper filtering handling
  - **Status**: Resolved
  - **Resolution**: Updated test to match actual implementation

- **TestDataView.test_filtering**: Fixed AttributeError for missing "_on_filter_changed" method
  - **Status**: Resolved
  - **Resolution**: Updated test to use the correct filtering API

- **TestValidationTab.test_validate_data**: Fixed AttributeError for missing "_validate_button" attribute
  - **Status**: Resolved
  - **Resolution**: Updated to use "_validate_btn" which is the actual attribute name

- **TestCorrectionTab.test_apply_correction**: Fixed AttributeError for missing "_get_selected_rows" method
  - **Status**: Resolved
  - **Resolution**: Updated test to use the current implementation methods

- **TestCorrectionTab.test_load_corrections**: Fixed AttributeError for missing "load_correction_templates"
  - **Status**: Resolved
  - **Resolution**: Updated test to match the actual implementation

### Method Name Mismatches
- **ChestDataModel Method Names**: Fixed mismatches between tests and implementation
  - **Status**: Resolved
  - **Resolution**: Updated tests to use `get_validation_status()` instead of `get_all_validation_status()` and `get_correction_status()` instead of `get_all_correction_status()`

- **Boolean Checking with DataFrames**: Fixed incorrect boolean checks
  - **Status**: Resolved
  - **Resolution**: Updated to use `.empty` property for checking empty DataFrames

- **Test Services Method Mismatches**: Fixed method name mismatches in test_services.py
  - **Status**: Resolved
  - **Resolution**: Updated to use the correct method names and parameter order

- **QApplication Handling**: Fixed issues with QApplication instances between tests
  - **Status**: Resolved
  - **Resolution**: Updated app fixture to properly handle existing instances

- **update_value vs update_data**: Fixed method name mismatch
  - **Status**: Resolved
  - **Resolution**: Updated all occurrences to use update_data() instead of update_value()

## Monitor List

- **UI Responsiveness**: Keep an eye on UI responsiveness with larger datasets
  - **Status**: Monitoring
  - **Components**: UI Components

- **Memory Usage**: Monitor memory usage with large datasets
  - **Status**: Monitoring
  - **Components**: ChestDataModel, DataView

## Future Improvements

- **Error Tracing**: Implement better error tracing and logging
  - **Status**: Planned
  - **Priority**: Medium
  - **Components**: All

- **CSV Import Preview**: Add preview functionality for CSV imports to help detect encoding issues
  - **Status**: Planned
  - **Priority**: Medium
  - **Components**: CSVService, UI

## Common Challenges

### Character Encoding
- **Issue**: German umlauts (ä, ö, ü, ß) often have encoding issues when processing CSV files
- **Solution**: Will implement special handling using ftfy, charset-normalizer, and unidecode libraries

### Performance with Large Datasets
- **Issue**: Potential performance challenges with large CSV files (10,000+ rows)
- **Solution**: Will implement efficient data structures and background processing

## Error Handling Strategy

1. Use clear and specific exception types
2. Implement comprehensive logging
3. Provide user-friendly error messages in the UI
4. Include context information for debugging
5. Use try-except blocks for all file operations

## Debugging Notes

### Test Failures
When tests fail, check:
1. API compatibility between tests and implementation
2. QApplication instance cleanup
3. File encoding issues with test data
4. Mock objects to avoid external dependencies

This section will be updated as development progresses and specific debugging techniques are identified for common issues. 