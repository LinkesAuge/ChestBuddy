---
description: Tracking of bugs, fixes, and ongoing issues
globs: 
alwaysApply: false
---

# Fixed Issues

## UI/Display Issues
- ✅ Progress dialog not showing during file loading
  - Fixed by ensuring the dialog is created with the right settings in MainWindow._on_load_started
  - Set minimum duration to 0 to show immediately
  - Added explicit visibility commands

- ✅ Data not displaying in table view after loading
  - Fixed the DataView._update_view method to correctly display data from the model
  - Added clearer logs to trace data flow
  - Improved error handling in update methods

- ✅ Multiple file import crashing
  - Fixed progress handling in MultiCSVLoadTask
  - Improved error resilience in _on_load_progress method
  - Added proper error handling for the progress dialog updates

- ✅ Progress dialog consistency issues
  - Enhanced MainWindow._on_load_progress to provide consistent information
  - Added proper tracking of file count, current file, and row progress
  - Improved visibility handling to ensure dialog stays visible throughout the loading process
  - Added more descriptive messages showing file progress (x/y) and row count

- ✅ Progress dialog not being shown during CSV import
  - Fixed by passing the DataManager instance to MainWindow in app.py
  - The MainWindow was being initialized without the data_manager parameter
  - This prevented the connection of load_started and load_progress signals

- ✅ SyntaxError in progress_bar.py
  - Fixed by removing extraneous backticks (```) at the end of the file
  - This was causing the application to fail at startup

- ✅ Incorrect import in main_window.py
  - Fixed incorrect import path for DataView module
  - Changed from 'chestbuddy.ui.widgets.data_view' to 'chestbuddy.ui.data_view'

- ✅ Missing color constant in progress_dialog.py
  - Fixed reference to non-existent color constant TEXT_PRIMARY
  - Changed to use TEXT_LIGHT which is available in the Colors class

- **Progress Dialog Not Showing Properly**: 
  - Location: `chestbuddy/ui/widgets/progress_bar.py`, `chestbuddy/ui/widgets/progress_dialog.py`
  - Issue: The progress dialog and progress bar weren't styled according to the desired design.
  - Fix: Updated the progress bar to show percentage on the right side with blue gradient. Enhanced the progress dialog with shadow effects, better spacing, and improved button styling.

- **App Freezing After CSV Import**: 
  - Location: `chestbuddy/app.py`
  - Issue: The application would freeze for some time after a CSV import completed because it automatically switched to the Data tab.
  - Fix: Removed the automatic tab switching code in `_on_data_load_success` that was using a QTimer to switch to the Data view. This allows the user to remain on their current view and prevents UI freezing.

## Background Processing Issues
- ✅ Signal connections not working properly
  - Fixed connections between DataManager and MainWindow
  - Enhanced signal handling with proper debug logs
  - Improved DataManager._connect_signals() method

- ✅ Progress not updating during file load
  - Fixed by modifying the MultiCSVLoadTask to use a consistent scale
  - Implemented better file-specific progress reporting
  - Added overall progress updates at appropriate points

- ✅ Background worker cleanup issues
  - Improved thread cleanup in BackgroundWorker.__del__
  - Added better error handling for worker cleanup
  - Eliminated forced thread termination during shutdown

- ✅ ConfigManager usage error in DataManager
  - Fixed incorrect usage of ConfigManager.set() method in _update_recent_files
  - Updated to use correct get_list() and set_list() methods with proper section/option parameters
  - Improved error handling in get_recent_files method to skip invalid paths

- ✅ Task ID mismatch in background processing
  - Fixed mismatch between MultiCSVLoadTask's task ID format and what DataManager expects
  - Added task ID recognition for "load_multi_csv_*" pattern in DataManager
  - Added missing signal connections in BackgroundWorker.execute_task method
  - Ensured proper propagation of task_completed and task_failed signals

- ✅ CSV import data handling error
  - Fixed mismatch between MultiCSVLoadTask return format and DataManager expectation
  - MultiCSVLoadTask.run() returns (success_boolean, data_or_error_message)
  - DataManager was expecting (DataFrame, message)
  - Updated _on_csv_load_success to correctly handle this format
  - Improved error handling for failed import operations

- **App crashes during CSV file import**: The application would crash in the middle of processing CSV files, particularly with large files.
  - Fixed by improving the memory management in `csv_service.py`, particularly the `read_csv_chunked` method which now incrementally processes chunks instead of storing all in memory.
  - Added robust error handling for memory errors, allowing partial data recovery.
  - Reduced UI update frequency in progress callbacks to prevent overwhelming the event queue.
  - Improved thread safety and signal handling for cross-thread communication.
  - Added proper resource cleanup and signal disconnection in the `BackgroundWorker` class.
  - Added safeguards against invalid configuration values like chunk size.

## Data Handling Issues
- ✅ ChestDataModel.update_data not notifying correctly
  - Fixed notification logic to ensure data changes are properly communicated
  - Added more detailed logging for debugging

# Remaining Issues

## Minor Issues
- QThread object deletion warning at shutdown
  - Non-critical issue related to Background Worker cleanup
  - Only occurs during application shutdown and doesn't affect functionality
  - Implemented a more graceful shutdown process to avoid thread termination
  - Improved warning messages to debug level to avoid alarming users

- **Memory usage during large file imports**: While improved, importing very large files still requires significant memory. 
  - Could be further improved by implementing disk-based intermediate storage for extremely large datasets.

## Lessons Learned

1. Signal connections require careful debugging to ensure they're properly connected and functioning
2. Progress reporting should have consistent scales and clear distinction between file-specific and overall progress
3. The Qt progress dialog requires explicit visibility commands in some cases
4. Background task error handling is critical for preventing crashes during file operations
5. Debug logging in key methods greatly assists troubleshooting complex interaction issues
6. Thread cleanup during application shutdown requires special handling to avoid errors
7. Tracking state in a dedicated dictionary (_loading_state) provides more consistent UI updates
8. Processing events (QApplication.processEvents()) is important for responsive UI updates during file operations
9. Check Python files for syntax errors such as extraneous code block markers (```) or incorrect indentation
10. Verify color constants and other resources exist before using them in UI components
11. Keep import paths consistent with actual project structure

- **Memory Management Patterns**: Accumulating chunks of data in memory can lead to crashes with large files. Instead:
  - Process data incrementally where possible
  - Implement early exit strategies for memory errors
  - Add progress throttling to reduce overhead
  - Consider using disk-based intermediate storage for very large datasets

- **Signal Safety**: When working with signals across threads:
  - Use robust error handling around every signal emission
  - Implement throttling for high-frequency progress updates
  - Always disconnect signals when done to prevent memory leaks
  - Use try/except blocks around Qt object interactions that might be deleted

# Bugfixing and Issue Tracking

## Fixed Issues

### UI/Display Issues
1. **Progress dialog not showing during file loading**: Fixed issue where the progress dialog was not properly displayed during CSV file loading. The MainWindow._on_load_started method was updated to ensure proper settings and visibility of the progress dialog. The method now blocks signals during the loading process and properly creates the dialog if it doesn't exist.

2. **Data not displaying in the table view after loading**: Fixed issue with DataView._update_view method to properly display loaded data. The method now correctly handles the case where the data model is empty and provides appropriate feedback.

3. **Multiple file import crashing**: Fixed issue where importing multiple files would cause the application to crash. The MultiCSVLoadTask class was updated to better handle progress reporting and multiple file imports.

4. **Syntax errors and incorrect imports**: Fixed various syntax errors and incorrect imports throughout the codebase, ensuring that all required modules are properly imported and initialized.

5. **Memory management during CSV imports**: Improved memory management during CSV imports to prevent crashes when loading large files. The DataManager now handles data more efficiently and releases resources after loading.

6. **App freezing after CSV import and automatic tab switch**: Fixed issue where the app would freeze after the last file is loaded and automatically switch to the data tab. This was resolved by removing the automatic tab switch behavior in the `_on_data_load_success` method of the `DataManager` class.

7. **Progress dialog styling**: Updated the styling of the progress dialog to match the app's overall design. The progress bar now has a blue gradient, shows percentage text, and the dialog has a white background with rounded corners.

8. **Chunking system for data loading**: Implemented a proper chunking system with a size of 100 for data loading:
   - Modified `CSVService.read_csv_chunked` to yield chunks instead of combining them
   - Updated `MultiCSVLoadTask.run()` to process and yield chunks
   - Added two-phase progress reporting (loading phase: 0-50%, processing phase: 50-100%)
   - Enhanced `DataView` to support incremental updates via `append_data_chunk` method
   - Updated the `MainWindow` to handle chunked processing with progress reporting for both phases

### Background Processing Issues

1. **CSV import data handling**: Fixed issue with CSV import where the data format returned by MultiCSVLoadTask.run() was not properly handled by DataManager._on_csv_load_success. The method now correctly handles the tuple format (success_boolean, data_or_error_message) instead of expecting (DataFrame, message).

2. **Progress window visibility**: Fixed issue where the progress window was not visible during CSV imports. The MainWindow now properly receives and connects to the DataManager's progress signals, ensuring that the progress dialog appears and updates correctly.

3. **Invalid progress reporting**: Fixed issue where progress was incorrectly reported, causing the progress bar to reach 100% before the table was fully populated. Implemented a two-phase progress reporting system where file loading represents 0-50% and table population represents 50-100%.

### Data Processing Issues

1. **CSV data chunks not processed efficiently**: Fixed issue where the chunking system (chunk size = 100) was not effectively utilized. The new implementation:
   - Loads data in chunks as specified
   - Updates the progress bar for both file reading and table population phases
   - Populates the table incrementally with visual feedback
   - Provides more accurate progress reporting

2. **Memory efficiency issues**: Improved memory efficiency by processing data in chunks and avoiding the creation of large DataFrames in memory. The chunks are now processed incrementally, reducing memory usage and improving application responsiveness.

3. **UI responsiveness during data loading**: Enhanced UI responsiveness by ensuring that QApplication.processEvents() is called at appropriate intervals during both loading and processing phases. The UI now remains responsive even when loading large files.

## Known Issues

1. **Error handling for invalid CSV files**: The application doesn't provide detailed error messages for invalid CSV files. It should provide more specific feedback about the issue (e.g., incorrect delimiter, encoding problems).

2. **Performance with very large files**: While chunking helps, there are still performance issues with extremely large files (>1GB), which might require additional optimizations.

3. **Cancellation during processing phase**: Cancelling a load operation during the processing phase does not immediately stop the operation. Need to implement more responsive cancellation.

## Ongoing Investigations

1. **Memory leak during multiple file imports**: Investigating potential memory leaks when importing multiple large files in sequence.

2. **Inconsistent progress reporting with non-standard CSV files**: The progress reporting is sometimes inaccurate when loading files with non-standard formats or encodings.

3. **UI freezing during validation operations**: The UI sometimes becomes unresponsive during complex validation operations. Investigating whether a similar chunking approach would help for validation tasks.
