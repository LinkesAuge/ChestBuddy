---
description: 
globs: 
alwaysApply: false
---
---
description: Tracking of bugs, fixes, and ongoing issues
globs: 
alwaysApply: false
---

# Fixed Issues

## UI/Display Issues
- ✅ Progress dialog not showing during file loading
  - Fixed by ensuring the dialog is created with the right settings in MainWindow._on_load_started
  - Set minimum duration to 0 to show immediately
  - Added explicit visibility commands

- ✅ Data not displaying in table view after loading
  - Fixed the DataView._update_view method to correctly display data from the model
  - Added clearer logs to trace data flow
  - Improved error handling in update methods

- ✅ Multiple file import crashing
  - Fixed progress handling in MultiCSVLoadTask
  - Improved error resilience in _on_load_progress method
  - Added proper error handling for the progress dialog updates

- ✅ Progress dialog consistency issues
  - Enhanced MainWindow._on_load_progress to provide consistent information
  - Added proper tracking of file count, current file, and row progress
  - Improved visibility handling to ensure dialog stays visible throughout the loading process
  - Added more descriptive messages showing file progress (x/y) and row count

- ✅ UI not unblocking after first import when confirming progress dialog
  - Fixed in MainWindow._close_progress_dialog by adding a call to _update_ui() after closing the dialog
  - Added detailed comments explaining the importance of this update
  - This ensures all UI elements are properly enabled after the user clicks "Confirm"
  - Only affected the first import operation, subsequent imports worked correctly

- ✅ SyntaxError in progress_bar.py
  - Fixed by removing extraneous backticks (```) at the end of the file
  - This was causing the application to fail at startup

- ✅ Incorrect import in main_window.py
  - Fixed incorrect import path for DataView module
  - Changed from 'chestbuddy.ui.widgets.data_view' to 'chestbuddy.ui.data_view'

- ✅ Missing color constant in progress_dialog.py
  - Fixed reference to non-existent color constant TEXT_PRIMARY
  - Changed to use TEXT_LIGHT which is available in the Colors class

- ✅ Progress dialog not closing properly after table population
  - Fixed the ProgressDialog._on_cancel_clicked method to always close the dialog after emitting the canceled signal
  - Simplified the ProgressDialog.close() method to avoid disconnecting critical signals
  - Updated MainWindow._finalize_loading to avoid breaking the cancel button functionality

- ✅ Multiple dialogs appearing during CSV import
  - Fixed by ensuring only one dialog is used throughout the entire import process
  - Modified DataManager._on_csv_load_success to prevent showing dialog for table population
  - Updated MainWindow._on_load_finished to keep the dialog open for user confirmation

- ✅ Progress dialog inappropriately showing table population status
  - Modified MainWindow._on_load_finished to keep the dialog open for explicit user confirmation
  - Ensured cancel button is renamed to "Close" once loading completes
  - Dialog no longer automatically closes, allowing users to review final status

## Background Processing Issues
- ✅ Signal connections not working properly
  - Fixed connections between DataManager and MainWindow
  - Enhanced signal handling with proper debug logs
  - Improved DataManager._connect_signals() method

- ✅ Progress not updating during file load
  - Fixed by modifying the MultiCSVLoadTask to use a consistent scale
  - Implemented better file-specific progress reporting
  - Added overall progress updates at appropriate points

- ✅ Background worker cleanup issues
  - Improved thread cleanup in BackgroundWorker.__del__
  - Added better error handling for worker cleanup
  - Eliminated forced thread termination during shutdown

- **App crashes during CSV file import**: The application would crash in the middle of processing CSV files, particularly with large files.
  - Fixed by improving the memory management in `csv_service.py`, particularly the `read_csv_chunked` method which now incrementally processes chunks instead of storing all in memory.
  - Added robust error handling for memory errors, allowing partial data recovery.
  - Reduced UI update frequency in progress callbacks to prevent overwhelming the event queue.
  - Improved thread safety and signal handling for cross-thread communication.
  - Added proper resource cleanup and signal disconnection in the `BackgroundWorker` class.
  - Added safeguards against invalid configuration values like chunk size.

## Data Handling Issues
- ✅ ChestDataModel.update_data not notifying correctly
  - Fixed notification logic to ensure data changes are properly communicated
  - Added more detailed logging for debugging

# Remaining Issues

## Minor Issues
- QThread object deletion warning at shutdown
  - Non-critical issue related to Background Worker cleanup
  - Only occurs during application shutdown and doesn't affect functionality
  - Implemented a more graceful shutdown process to avoid thread termination
  - Improved warning messages to debug level to avoid alarming users

- **Memory usage during large file imports**: While improved, importing very large files still requires significant memory. 
  - Could be further improved by implementing disk-based intermediate storage for extremely large datasets.

## Lessons Learned

1. Signal connections require careful debugging to ensure they're properly connected and functioning
2. Progress reporting should have consistent scales and clear distinction between file-specific and overall progress
3. The Qt progress dialog requires explicit visibility commands in some cases
4. Background task error handling is critical for preventing crashes during file operations
5. Debug logging in key methods greatly assists troubleshooting complex interaction issues
6. Thread cleanup during application shutdown requires special handling to avoid errors
7. Tracking state in a dedicated dictionary (_loading_state) provides more consistent UI updates
8. Processing events (QApplication.processEvents()) is important for responsive UI updates during file operations
9. Check Python files for syntax errors such as extraneous code block markers (```) or incorrect indentation
10. Verify color constants and other resources exist before using them in UI components
11. Keep import paths consistent with actual project structure

- **Memory Management Patterns**: Accumulating chunks of data in memory can lead to crashes with large files. Instead:
  - Process data incrementally where possible
  - Implement early exit strategies for memory errors
  - Add progress throttling to reduce overhead
  - Consider using disk-based intermediate storage for very large datasets

- **Signal Safety**: When working with signals across threads:
  - Use robust error handling around every signal emission
  - Implement throttling for high-frequency progress updates
  - Always disconnect signals when done to prevent memory leaks
  - Use try/except blocks around Qt object interactions that might be deleted

# Bugfixing Log

*Last Updated: 2025-03-24*

## Recent Fixes

### 2025-03-24: Fixed UI Blocking Issue After First Import

**Issue**: When importing files for the first time and the progress window finished, clicking "Confirm" would not unblock the UI for the user. However, subsequent imports worked correctly.

**Root Cause**: In the `_close_progress_dialog` method, the dialog was properly closed but the UI state was not updated afterward. This caused UI elements to remain blocked after the first import. Subsequent imports worked because they went through the full import flow which included proper UI updates.

**Fix**:
1. Modified `MainWindow._close_progress_dialog` to call `_update_ui()` after closing the dialog
2. Added detailed comments explaining the importance of this update
3. Added logging to track when UI state is updated

**Validation**:
- Verified that the UI becomes interactive immediately after clicking "Confirm" on the first import
- Confirmed that subsequent imports continue to work correctly
- Tested multiple file import scenarios to ensure consistent behavior

**File(s) Modified**:
- `chestbuddy/ui/main_window.py`

### 2025-03-23: Fixed Import Functionality and UI Unblocking Issues

**Issue**: Three related issues affected the import functionality:
1. The input data was being processed twice, causing duplicate processing and UI lag
2. When using the "Open" menu option from the nav bar, the UI wasn't properly unblocked
3. The Import action card in the dashboard wasn't properly connected to the import functionality

**Root Cause**:
1. Double processing: The `DataManager._on_csv_load_success` method emitted two signals that both triggered UI updates
2. UI blocking: The `_on_load_finished` method didn't handle cases where the progress dialog might not exist
3. Import card: The dashboard action card for imports was emitting "import_csv" action instead of the standardized "import"

**Fix**:
1. Removed the redundant `data_changed.emit()` call in `DataManager._on_csv_load_success`
2. Enhanced `MainWindow._on_load_finished` to:
   - Create a temporary progress dialog if none exists
   - Better handle all possible load completion scenarios
   - Always check the data model state to ensure UI unblocking
3. Added action mapping in dashboard's `_handle_action` method to map "import_csv", "import_excel", and "import_json" to the standard "import" action

**Validation**:
- Verified data loading only occurs once
- Successfully opened files using the File → Open menu option
- Confirmed the Import action card now correctly triggers file import
- Tested all import methods (menu, dashboard card, empty state buttons)

**File(s) Modified**:
- `chestbuddy/core/services/data_manager.py`
- `chestbuddy/ui/main_window.py`
- `chestbuddy/ui/views/dashboard_view_adapter.py`

### 2025-03-23: Standardized Import Button Behavior

**Issue**: Different import buttons throughout the application were using inconsistent signal patterns, with some emitting "import_csv" and others emitting "import", leading to inconsistent behavior.

**Root Cause**:
1. The `_on_import_data_requested` method in the `BaseView` class was not standardized to emit a consistent signal.
2. Some views were using "action_clicked" signals while others used "action_triggered" signals.
3. The lack of documentation on how import buttons should behave led to inconsistent implementations.

**Fix**:
1. Enhanced the `_on_import_data_requested` method in `BaseView` with comprehensive documentation.
2. Modified the method to emit standardized signals for imports:
   - `data_requested` for backward compatibility
   - `action_triggered("import")` as the preferred method
   - Falls back to `action_clicked("import")` for views with older signal patterns
3. Ensured all import buttons use this central method for consistent behavior.

**Validation**:
- Confirmed all import buttons now trigger the same handler (`_on_dashboard_action` with "import").
- Verified that imports work consistently from all parts of the application.
- Tested import functionality from Dashboard, empty Data view, and menu actions.

**File(s) Modified**:
- `chestbuddy/ui/views/base_view.py`

## Ongoing Issues

### Performance with Large Datasets

**Issue**: Table view performance degrades with datasets larger than 100,000 rows.

**Status**: Under investigation

**Observations**:
- Memory usage spikes during filtering operations
- UI becomes unresponsive during sorting operations
- Model updates trigger multiple UI refreshes

**Planned Fixes**:
- Implement virtual scrolling to only render visible rows
- Optimize in-memory data structures for faster access
- Batch UI updates to reduce rendering overhead

### Chart Export Quality

**Issue**: Exported charts have lower resolution than displayed charts and some formatting is lost during PDF export.

**Status**: Identified, scheduled for Milestone 5

**Observations**:
- Font rendering differs between screen and PDF output
- Colors may appear differently in exported files
- Legend positioning is inconsistent in exports

### UI Freezing During Heavy Operations

**Issue**: UI occasionally freezes during heavy data processing operations.

**Status**: Partially fixed, ongoing work

**Observations**:
- Operations that process the entire dataset can cause UI freezes
- Progress dialog updates can be delayed during intensive operations
- Some background operations are blocking the main thread

**Partial Fixes Applied**:
- Moved CSV loading to background thread
- Implemented chunked processing for large files
- Added cancellation support for long-running operations

**Remaining Work**:
- Improve thread management for all intensive operations
- Add more granular progress reporting
- Implement task prioritization for background work

## Fixed Issues History

### 2025-02-15: Chart Preview Rendering Issue

**Issue**: Chart previews were not rendering correctly in the dashboard, appearing as blank cards.

**Root Cause**: The chart rendering was happening on a background thread, but the UI update was not properly synchronized with the main thread.

**Fix**: Implemented proper signal/slot connection to ensure chart updates are processed on the main thread.

**File(s) Modified**:
- `chestbuddy/ui/widgets/chart_preview.py`
- `chestbuddy/core/services/dashboard_service.py`

### 2025-01-20: Memory Leak During CSV Loading

**Issue**: Memory usage would continuously increase when loading multiple CSV files in succession.

**Root Cause**: Temporary data structures used during CSV parsing were not being properly cleaned up after use.

**Fix**: Added explicit cleanup of temporary structures and implemented proper reference management.

**File(s) Modified**:
- `chestbuddy/core/data/csv_loader.py`
- `chestbuddy/core/tasks/multi_csv_load_task.py`

### 2024-12-05: Encoding Detection Failure

**Issue**: Some CSV files with non-standard encodings were failing to load.

**Root Cause**: The encoding detection algorithm was too strict and was rejecting valid encodings.

**Fix**: Enhanced the encoding detection to try multiple approaches and fall back to common encodings when detection is uncertain.

**File(s) Modified**:
- `chestbuddy/core/utils/file_utils.py`
- `chestbuddy/core/data/csv_loader.py`

### 2024-11-10: Configuration Save Failure

**Issue**: Application settings were not being saved when the application was closed abruptly.

**Root Cause**: Configuration was only being saved on normal exit, not during unexpected terminations.

**Fix**: Implemented periodic autosave of configuration and added signal handlers for application termination events.

**File(s) Modified**:
- `chestbuddy/core/config/config_manager.py`
- `chestbuddy/app.py`

### 2024-10-15: Action Button Styling Inconsistency

**Issue**: Action buttons had inconsistent styling across different views.

**Root Cause**: Style properties were being defined independently in each view instead of using a central style definition.

**Fix**: Created a central style definition for action buttons and updated all instances to use it.

**File(s) Modified**:
- `chestbuddy/ui/widgets/action_button.py`
- `chestbuddy/ui/styles/style_constants.py`
- Multiple view adapter files
